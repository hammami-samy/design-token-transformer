
//
// StyleDictionary.swift
//

// Do not edit directly
// Generated on Tue, 07 Mar 2023 15:55:15 GMT


import UIKit

public class StyleDictionary {
    public static let colorActionsCriticalDefault = UIColor(red: 0.882, green: 0.031, blue: 0.031, alpha: 1)
    public static let colorActionsCriticalDisabled = UIColor(red: 0.875, green: 0.882, blue: 0.906, alpha: 1)
    public static let colorActionsCriticalHovered = UIColor(red: 0.769, green: 0.000, blue: 0.000, alpha: 1)
    public static let colorActionsCriticalPressed = UIColor(red: 0.608, green: 0.141, blue: 0.008, alpha: 1)
    public static let colorActionsHighlightDefault = UIColor(red: 0.341, green: 0.561, blue: 0.714, alpha: 1)
    public static let colorActionsHighlightDisabled = UIColor(red: 0.875, green: 0.882, blue: 0.906, alpha: 1)
    public static let colorActionsHighlightHovered = UIColor(red: 0.231, green: 0.447, blue: 0.604, alpha: 1)
    public static let colorActionsHighlightPressed = UIColor(red: 0.169, green: 0.306, blue: 0.404, alpha: 1)
    public static let colorActionsPrimaryDefault = UIColor(red: 0.902, green: 0.439, blue: 0.243, alpha: 1)
    public static let colorActionsPrimaryDisabled = UIColor(red: 0.875, green: 0.882, blue: 0.906, alpha: 1)
    public static let colorActionsPrimaryHovered = UIColor(red: 0.706, green: 0.325, blue: 0.169, alpha: 1)
    public static let colorActionsPrimaryPressed = UIColor(red: 0.553, green: 0.267, blue: 0.141, alpha: 1)
    public static let colorActionsSecondaryDefault = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1)
    public static let colorActionsSecondaryDisabled = UIColor(red: 0.918, green: 0.925, blue: 0.937, alpha: 1)
    public static let colorActionsSecondaryHovered = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1)
    public static let colorActionsSecondaryPressed = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1)
    public static let colorActionsSuccessDefault = UIColor(red: 0.349, green: 0.604, blue: 0.098, alpha: 1)
    public static let colorActionsSuccessDisabled = UIColor(red: 0.875, green: 0.882, blue: 0.906, alpha: 1)
    public static let colorActionsSuccessHovered = UIColor(red: 0.271, green: 0.467, blue: 0.078, alpha: 1)
    public static let colorActionsSuccessPressed = UIColor(red: 0.188, green: 0.329, blue: 0.051, alpha: 1)
    public static let colorActionsWarningDefault = UIColor(red: 0.761, green: 0.588, blue: 0.000, alpha: 1)
    public static let colorActionsWarningDisabled = UIColor(red: 0.875, green: 0.882, blue: 0.906, alpha: 1)
    public static let colorActionsWarningHovered = UIColor(red: 0.624, green: 0.486, blue: 0.000, alpha: 1)
    public static let colorActionsWarningPressed = UIColor(red: 0.427, green: 0.333, blue: 0.000, alpha: 1)
    public static let colorBackgroundDefault = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1)
    public static let colorBackgroundHovered = UIColor(red: 0.957, green: 0.965, blue: 0.969, alpha: 1)
    public static let colorBackgroundPressed = UIColor(red: 0.875, green: 0.882, blue: 0.906, alpha: 1)
    public static let colorBackgroundSelected = UIColor(red: 0.776, green: 0.796, blue: 0.843, alpha: 1)
    public static let colorBaseColorsCritical100 = UIColor(red: 0.969, green: 0.933, blue: 0.925, alpha: 1)
    public static let colorBaseColorsCritical200 = UIColor(red: 0.980, green: 0.800, blue: 0.761, alpha: 1)
    public static let colorBaseColorsCritical300 = UIColor(red: 0.918, green: 0.412, blue: 0.412, alpha: 1)
    public static let colorBaseColorsCritical400 = UIColor(red: 0.882, green: 0.031, blue: 0.031, alpha: 1)
    public static let colorBaseColorsCritical500 = UIColor(red: 0.769, green: 0.000, blue: 0.000, alpha: 1)
    public static let colorBaseColorsCritical600 = UIColor(red: 0.608, green: 0.141, blue: 0.008, alpha: 1)
    public static let colorBaseColorsGreyScale100 = UIColor(red: 0.957, green: 0.965, blue: 0.969, alpha: 1)
    public static let colorBaseColorsGreyScale200 = UIColor(red: 0.918, green: 0.925, blue: 0.937, alpha: 1)
    public static let colorBaseColorsGreyScale300 = UIColor(red: 0.875, green: 0.882, blue: 0.906, alpha: 1)
    public static let colorBaseColorsGreyScale400 = UIColor(red: 0.776, green: 0.796, blue: 0.843, alpha: 1)
    public static let colorBaseColorsGreyScale500 = UIColor(red: 0.592, green: 0.620, blue: 0.714, alpha: 1)
    public static let colorBaseColorsGreyScale600 = UIColor(red: 0.388, green: 0.416, blue: 0.502, alpha: 1)
    public static let colorBaseColorsGreyScale700 = UIColor(red: 0.235, green: 0.255, blue: 0.333, alpha: 1)
    public static let colorBaseColorsGreyScale800 = UIColor(red: 0.267, green: 0.153, blue: 0.271, alpha: 1)
    public static let colorBaseColorsHighlight100 = UIColor(red: 0.914, green: 0.945, blue: 0.965, alpha: 1)
    public static let colorBaseColorsHighlight200 = UIColor(red: 0.780, green: 0.882, blue: 0.949, alpha: 1)
    public static let colorBaseColorsHighlight300 = UIColor(red: 0.431, green: 0.710, blue: 0.906, alpha: 1)
    public static let colorBaseColorsHighlight400 = UIColor(red: 0.341, green: 0.561, blue: 0.714, alpha: 1)
    public static let colorBaseColorsHighlight500 = UIColor(red: 0.231, green: 0.447, blue: 0.604, alpha: 1)
    public static let colorBaseColorsHighlight600 = UIColor(red: 0.169, green: 0.306, blue: 0.404, alpha: 1)
    public static let colorBaseColorsNeutralsBlack = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1)
    public static let colorBaseColorsNeutralsWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1)
    public static let colorBaseColorsPrimary100 = UIColor(red: 1.000, green: 0.969, blue: 0.953, alpha: 1)
    public static let colorBaseColorsPrimary200 = UIColor(red: 1.000, green: 0.929, blue: 0.894, alpha: 1)
    public static let colorBaseColorsPrimary300 = UIColor(red: 1.000, green: 0.753, blue: 0.651, alpha: 1)
    public static let colorBaseColorsPrimary400 = UIColor(red: 0.902, green: 0.439, blue: 0.243, alpha: 1)
    public static let colorBaseColorsPrimary500 = UIColor(red: 0.706, green: 0.325, blue: 0.169, alpha: 1)
    public static let colorBaseColorsPrimary600 = UIColor(red: 0.553, green: 0.267, blue: 0.145, alpha: 1)
    public static let colorBaseColorsSuccess100 = UIColor(red: 0.910, green: 0.941, blue: 0.886, alpha: 1)
    public static let colorBaseColorsSuccess200 = UIColor(red: 0.831, green: 0.902, blue: 0.765, alpha: 1)
    public static let colorBaseColorsSuccess300 = UIColor(red: 0.565, green: 0.757, blue: 0.373, alpha: 1)
    public static let colorBaseColorsSuccess400 = UIColor(red: 0.349, green: 0.604, blue: 0.098, alpha: 1)
    public static let colorBaseColorsSuccess500 = UIColor(red: 0.271, green: 0.467, blue: 0.078, alpha: 1)
    public static let colorBaseColorsSuccess600 = UIColor(red: 0.188, green: 0.329, blue: 0.051, alpha: 1)
    public static let colorBaseColorsWarning100 = UIColor(red: 0.961, green: 0.949, blue: 0.878, alpha: 1)
    public static let colorBaseColorsWarning200 = UIColor(red: 0.957, green: 0.890, blue: 0.647, alpha: 1)
    public static let colorBaseColorsWarning300 = UIColor(red: 0.925, green: 0.780, blue: 0.282, alpha: 1)
    public static let colorBaseColorsWarning400 = UIColor(red: 0.761, green: 0.588, blue: 0.000, alpha: 1)
    public static let colorBaseColorsWarning500 = UIColor(red: 0.624, green: 0.486, blue: 0.000, alpha: 1)
    public static let colorBaseColorsWarning600 = UIColor(red: 0.427, green: 0.333, blue: 0.000, alpha: 1)
    public static let colorBorderCriticalDefault = UIColor(red: 0.882, green: 0.031, blue: 0.031, alpha: 1)
    public static let colorBorderCriticalSubdued = UIColor(red: 0.918, green: 0.412, blue: 0.412, alpha: 1)
    public static let colorBorderDefault = UIColor(red: 0.388, green: 0.416, blue: 0.502, alpha: 1)
    public static let colorBorderDisabled = UIColor(red: 0.875, green: 0.882, blue: 0.906, alpha: 1)
    public static let colorBorderHighlightDefault = UIColor(red: 0.341, green: 0.561, blue: 0.714, alpha: 1)
    public static let colorBorderHighlightSubdued = UIColor(red: 0.431, green: 0.710, blue: 0.902, alpha: 1)
    public static let colorBorderPrimaryDefault = UIColor(red: 0.902, green: 0.439, blue: 0.243, alpha: 1)
    public static let colorBorderPrimarySubdued = UIColor(red: 1.000, green: 0.753, blue: 0.651, alpha: 1)
    public static let colorBorderSubdued = UIColor(red: 0.592, green: 0.620, blue: 0.714, alpha: 1)
    public static let colorBorderSuccessDefault = UIColor(red: 0.349, green: 0.604, blue: 0.098, alpha: 1)
    public static let colorBorderSuccessSubdued = UIColor(red: 0.565, green: 0.757, blue: 0.373, alpha: 1)
    public static let colorBorderWarningDefault = UIColor(red: 0.761, green: 0.588, blue: 0.000, alpha: 1)
    public static let colorBorderWarningSubdued = UIColor(red: 0.925, green: 0.780, blue: 0.282, alpha: 1)
    public static let colorIconCritical = UIColor(red: 0.882, green: 0.031, blue: 0.031, alpha: 1)
    public static let colorIconDefault = UIColor(red: 0.157, green: 0.169, blue: 0.247, alpha: 1)
    public static let colorIconDisabled = UIColor(red: 0.875, green: 0.882, blue: 0.906, alpha: 1)
    public static let colorIconHighlight = UIColor(red: 0.341, green: 0.561, blue: 0.714, alpha: 1)
    public static let colorIconHovered = UIColor(red: 0.592, green: 0.620, blue: 0.714, alpha: 1)
    public static let colorIconOnsurface = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1)
    public static let colorIconPressed = UIColor(red: 0.388, green: 0.416, blue: 0.502, alpha: 1)
    public static let colorIconSuccess = UIColor(red: 0.349, green: 0.604, blue: 0.098, alpha: 1)
    public static let colorIconWarning = UIColor(red: 0.761, green: 0.588, blue: 0.000, alpha: 1)
    public static let colorSurfaceCriticalDefault = UIColor(red: 0.882, green: 0.031, blue: 0.031, alpha: 1)
    public static let colorSurfaceCriticalHovered = UIColor(red: 0.980, green: 0.800, blue: 0.761, alpha: 1)
    public static let colorSurfaceCriticalPressed = UIColor(red: 0.769, green: 0.000, blue: 0.000, alpha: 1)
    public static let colorSurfaceCriticalSubdued = UIColor(red: 0.969, green: 0.933, blue: 0.925, alpha: 1)
    public static let colorSurfaceDefault = UIColor(red: 0.388, green: 0.416, blue: 0.502, alpha: 1)
    public static let colorSurfaceHighlightDefault = UIColor(red: 0.341, green: 0.561, blue: 0.714, alpha: 1)
    public static let colorSurfaceHighlightHovered = UIColor(red: 0.780, green: 0.882, blue: 0.949, alpha: 1)
    public static let colorSurfaceHighlightPressed = UIColor(red: 0.231, green: 0.447, blue: 0.604, alpha: 1)
    public static let colorSurfaceHighlightSubdued = UIColor(red: 0.914, green: 0.945, blue: 0.965, alpha: 1)
    public static let colorSurfaceHovered = UIColor(red: 0.875, green: 0.882, blue: 0.906, alpha: 1)
    public static let colorSurfacePressed = UIColor(red: 0.231, green: 0.255, blue: 0.333, alpha: 1)
    public static let colorSurfaceSelectedDefault = UIColor(red: 0.902, green: 0.439, blue: 0.243, alpha: 1)
    public static let colorSurfaceSelectedHovered = UIColor(red: 1.000, green: 0.969, blue: 0.953, alpha: 1)
    public static let colorSurfaceSelectedPressed = UIColor(red: 0.706, green: 0.325, blue: 0.169, alpha: 1)
    public static let colorSurfaceSubdued = UIColor(red: 0.957, green: 0.965, blue: 0.969, alpha: 1)
    public static let colorSurfaceSuccessDefault = UIColor(red: 0.349, green: 0.604, blue: 0.098, alpha: 1)
    public static let colorSurfaceSuccessHovered = UIColor(red: 0.831, green: 0.902, blue: 0.765, alpha: 1)
    public static let colorSurfaceSuccessPressed = UIColor(red: 0.271, green: 0.467, blue: 0.078, alpha: 1)
    public static let colorSurfaceSuccessSubdued = UIColor(red: 0.910, green: 0.941, blue: 0.886, alpha: 1)
    public static let colorSurfaceWarningDefault = UIColor(red: 0.761, green: 0.588, blue: 0.000, alpha: 1)
    public static let colorSurfaceWarningHovered = UIColor(red: 0.957, green: 0.890, blue: 0.647, alpha: 1)
    public static let colorSurfaceWarningPressed = UIColor(red: 0.624, green: 0.486, blue: 0.000, alpha: 1)
    public static let colorSurfaceWarningSubdued = UIColor(red: 0.961, green: 0.949, blue: 0.878, alpha: 1)
    public static let colorTextCritical = UIColor(red: 0.882, green: 0.031, blue: 0.031, alpha: 1)
    public static let colorTextDefault = UIColor(red: 0.157, green: 0.169, blue: 0.247, alpha: 1)
    public static let colorTextDisabled = UIColor(red: 0.875, green: 0.882, blue: 0.906, alpha: 1)
    public static let colorTextHighlight = UIColor(red: 0.341, green: 0.561, blue: 0.714, alpha: 1)
    public static let colorTextOnsurface = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1)
    public static let colorTextSubdued = UIColor(red: 0.388, green: 0.416, blue: 0.502, alpha: 1)
    public static let colorTextSuccess = UIColor(red: 0.349, green: 0.604, blue: 0.098, alpha: 1)
    public static let colorTextWarning = UIColor(red: 0.761, green: 0.588, blue: 0.000, alpha: 1)
    public static let effectShadowsLarge = [object Object]
    public static let effectShadowsRegular = [object Object]
    public static let fontLargeScreenBody = "[object Object]"
    public static let fontLargeScreenButton = "[object Object]"
    public static let fontLargeScreenCaption = "[object Object]"
    public static let fontLargeScreenDisplayLarge = "[object Object]"
    public static let fontLargeScreenDisplayMedium = "[object Object]"
    public static let fontLargeScreenDisplaySmall = "[object Object]"
    public static let fontLargeScreenDisplayXlarge = "[object Object]"
    public static let fontLargeScreenHeading = "[object Object]"
    public static let fontLargeScreenSubheading = "[object Object]"
    public static let fontSmallScreenBody = "[object Object]"
    public static let fontSmallScreenButton = "[object Object]"
    public static let fontSmallScreenCaption = "[object Object]"
    public static let fontSmallScreenDisplayLarge = "[object Object]"
    public static let fontSmallScreenDisplayMedium = "[object Object]"
    public static let fontSmallScreenDisplaySmall = "[object Object]"
    public static let fontSmallScreenDisplayXlarge = "[object Object]"
    public static let fontSmallScreenHeading = "[object Object]"
    public static let fontSmallScreenSubheading = "[object Object]"
    public static let typographyLargeScreenBodyFontFamily = Roboto
    public static let typographyLargeScreenBodyFontSize = 14
    public static let typographyLargeScreenBodyFontStretch = normal
    public static let typographyLargeScreenBodyFontStyle = normal
    public static let typographyLargeScreenBodyFontWeight = 400
    public static let typographyLargeScreenBodyLetterSpacing = 0
    public static let typographyLargeScreenBodyLineHeight = 20
    public static let typographyLargeScreenBodyParagraphIndent = 0
    public static let typographyLargeScreenBodyParagraphSpacing = 0
    public static let typographyLargeScreenBodyTextCase = none
    public static let typographyLargeScreenBodyTextDecoration = none
    public static let typographyLargeScreenButtonFontFamily = Roboto
    public static let typographyLargeScreenButtonFontSize = 16
    public static let typographyLargeScreenButtonFontStretch = normal
    public static let typographyLargeScreenButtonFontStyle = normal
    public static let typographyLargeScreenButtonFontWeight = 500
    public static let typographyLargeScreenButtonLetterSpacing = 0
    public static let typographyLargeScreenButtonLineHeight = 24
    public static let typographyLargeScreenButtonParagraphIndent = 0
    public static let typographyLargeScreenButtonParagraphSpacing = 0
    public static let typographyLargeScreenButtonTextCase = none
    public static let typographyLargeScreenButtonTextDecoration = none
    public static let typographyLargeScreenCaptionFontFamily = Roboto
    public static let typographyLargeScreenCaptionFontSize = 12
    public static let typographyLargeScreenCaptionFontStretch = normal
    public static let typographyLargeScreenCaptionFontStyle = normal
    public static let typographyLargeScreenCaptionFontWeight = 400
    public static let typographyLargeScreenCaptionLetterSpacing = 0
    public static let typographyLargeScreenCaptionLineHeight = 16
    public static let typographyLargeScreenCaptionParagraphIndent = 0
    public static let typographyLargeScreenCaptionParagraphSpacing = 0
    public static let typographyLargeScreenCaptionTextCase = none
    public static let typographyLargeScreenCaptionTextDecoration = none
    public static let typographyLargeScreenDisplayLargeFontFamily = Roboto
    public static let typographyLargeScreenDisplayLargeFontSize = 28
    public static let typographyLargeScreenDisplayLargeFontStretch = normal
    public static let typographyLargeScreenDisplayLargeFontStyle = normal
    public static let typographyLargeScreenDisplayLargeFontWeight = 600
    public static let typographyLargeScreenDisplayLargeLetterSpacing = 0
    public static let typographyLargeScreenDisplayLargeLineHeight = 32
    public static let typographyLargeScreenDisplayLargeParagraphIndent = 0
    public static let typographyLargeScreenDisplayLargeParagraphSpacing = 0
    public static let typographyLargeScreenDisplayLargeTextCase = none
    public static let typographyLargeScreenDisplayLargeTextDecoration = none
    public static let typographyLargeScreenDisplayMediumFontFamily = Roboto
    public static let typographyLargeScreenDisplayMediumFontSize = 26
    public static let typographyLargeScreenDisplayMediumFontStretch = normal
    public static let typographyLargeScreenDisplayMediumFontStyle = normal
    public static let typographyLargeScreenDisplayMediumFontWeight = 400
    public static let typographyLargeScreenDisplayMediumLetterSpacing = 0
    public static let typographyLargeScreenDisplayMediumLineHeight = 32
    public static let typographyLargeScreenDisplayMediumParagraphIndent = 0
    public static let typographyLargeScreenDisplayMediumParagraphSpacing = 0
    public static let typographyLargeScreenDisplayMediumTextCase = none
    public static let typographyLargeScreenDisplayMediumTextDecoration = none
    public static let typographyLargeScreenDisplaySmallFontFamily = Roboto
    public static let typographyLargeScreenDisplaySmallFontSize = 20
    public static let typographyLargeScreenDisplaySmallFontStretch = normal
    public static let typographyLargeScreenDisplaySmallFontStyle = normal
    public static let typographyLargeScreenDisplaySmallFontWeight = 400
    public static let typographyLargeScreenDisplaySmallLetterSpacing = 0
    public static let typographyLargeScreenDisplaySmallLineHeight = 37
    public static let typographyLargeScreenDisplaySmallParagraphIndent = 0
    public static let typographyLargeScreenDisplaySmallParagraphSpacing = 0
    public static let typographyLargeScreenDisplaySmallTextCase = none
    public static let typographyLargeScreenDisplaySmallTextDecoration = none
    public static let typographyLargeScreenDisplayXlargeFontFamily = Roboto
    public static let typographyLargeScreenDisplayXlargeFontSize = 42
    public static let typographyLargeScreenDisplayXlargeFontStretch = normal
    public static let typographyLargeScreenDisplayXlargeFontStyle = normal
    public static let typographyLargeScreenDisplayXlargeFontWeight = 600
    public static let typographyLargeScreenDisplayXlargeLetterSpacing = 0
    public static let typographyLargeScreenDisplayXlargeLineHeight = 48
    public static let typographyLargeScreenDisplayXlargeParagraphIndent = 0
    public static let typographyLargeScreenDisplayXlargeParagraphSpacing = 0
    public static let typographyLargeScreenDisplayXlargeTextCase = none
    public static let typographyLargeScreenDisplayXlargeTextDecoration = none
    public static let typographyLargeScreenHeadingFontFamily = Roboto
    public static let typographyLargeScreenHeadingFontSize = 16
    public static let typographyLargeScreenHeadingFontStretch = normal
    public static let typographyLargeScreenHeadingFontStyle = normal
    public static let typographyLargeScreenHeadingFontWeight = 600
    public static let typographyLargeScreenHeadingLetterSpacing = 0
    public static let typographyLargeScreenHeadingLineHeight = 24
    public static let typographyLargeScreenHeadingParagraphIndent = 0
    public static let typographyLargeScreenHeadingParagraphSpacing = 0
    public static let typographyLargeScreenHeadingTextCase = none
    public static let typographyLargeScreenHeadingTextDecoration = none
    public static let typographyLargeScreenSubheadingFontFamily = Roboto
    public static let typographyLargeScreenSubheadingFontSize = 14
    public static let typographyLargeScreenSubheadingFontStretch = normal
    public static let typographyLargeScreenSubheadingFontStyle = normal
    public static let typographyLargeScreenSubheadingFontWeight = 600
    public static let typographyLargeScreenSubheadingLetterSpacing = 0
    public static let typographyLargeScreenSubheadingLineHeight = 20
    public static let typographyLargeScreenSubheadingParagraphIndent = 0
    public static let typographyLargeScreenSubheadingParagraphSpacing = 0
    public static let typographyLargeScreenSubheadingTextCase = uppercase
    public static let typographyLargeScreenSubheadingTextDecoration = none
    public static let typographySmallScreenBodyFontFamily = Roboto
    public static let typographySmallScreenBodyFontSize = 16
    public static let typographySmallScreenBodyFontStretch = normal
    public static let typographySmallScreenBodyFontStyle = normal
    public static let typographySmallScreenBodyFontWeight = 400
    public static let typographySmallScreenBodyLetterSpacing = 0
    public static let typographySmallScreenBodyLineHeight = 24
    public static let typographySmallScreenBodyParagraphIndent = 0
    public static let typographySmallScreenBodyParagraphSpacing = 0
    public static let typographySmallScreenBodyTextCase = none
    public static let typographySmallScreenBodyTextDecoration = none
    public static let typographySmallScreenButtonFontFamily = Roboto
    public static let typographySmallScreenButtonFontSize = 16
    public static let typographySmallScreenButtonFontStretch = normal
    public static let typographySmallScreenButtonFontStyle = normal
    public static let typographySmallScreenButtonFontWeight = 500
    public static let typographySmallScreenButtonLetterSpacing = 0
    public static let typographySmallScreenButtonLineHeight = 20
    public static let typographySmallScreenButtonParagraphIndent = 0
    public static let typographySmallScreenButtonParagraphSpacing = 0
    public static let typographySmallScreenButtonTextCase = none
    public static let typographySmallScreenButtonTextDecoration = none
    public static let typographySmallScreenCaptionFontFamily = Roboto
    public static let typographySmallScreenCaptionFontSize = 13
    public static let typographySmallScreenCaptionFontStretch = normal
    public static let typographySmallScreenCaptionFontStyle = normal
    public static let typographySmallScreenCaptionFontWeight = 400
    public static let typographySmallScreenCaptionLetterSpacing = 0
    public static let typographySmallScreenCaptionLineHeight = 16
    public static let typographySmallScreenCaptionParagraphIndent = 0
    public static let typographySmallScreenCaptionParagraphSpacing = 0
    public static let typographySmallScreenCaptionTextCase = none
    public static let typographySmallScreenCaptionTextDecoration = none
    public static let typographySmallScreenDisplayLargeFontFamily = Roboto
    public static let typographySmallScreenDisplayLargeFontSize = 24
    public static let typographySmallScreenDisplayLargeFontStretch = normal
    public static let typographySmallScreenDisplayLargeFontStyle = normal
    public static let typographySmallScreenDisplayLargeFontWeight = 600
    public static let typographySmallScreenDisplayLargeLetterSpacing = 0
    public static let typographySmallScreenDisplayLargeLineHeight = 32
    public static let typographySmallScreenDisplayLargeParagraphIndent = 0
    public static let typographySmallScreenDisplayLargeParagraphSpacing = 0
    public static let typographySmallScreenDisplayLargeTextCase = none
    public static let typographySmallScreenDisplayLargeTextDecoration = none
    public static let typographySmallScreenDisplayMediumFontFamily = Roboto
    public static let typographySmallScreenDisplayMediumFontSize = 20
    public static let typographySmallScreenDisplayMediumFontStretch = normal
    public static let typographySmallScreenDisplayMediumFontStyle = normal
    public static let typographySmallScreenDisplayMediumFontWeight = 400
    public static let typographySmallScreenDisplayMediumLetterSpacing = 0
    public static let typographySmallScreenDisplayMediumLineHeight = 24
    public static let typographySmallScreenDisplayMediumParagraphIndent = 0
    public static let typographySmallScreenDisplayMediumParagraphSpacing = 0
    public static let typographySmallScreenDisplayMediumTextCase = none
    public static let typographySmallScreenDisplayMediumTextDecoration = none
    public static let typographySmallScreenDisplaySmallFontFamily = Roboto
    public static let typographySmallScreenDisplaySmallFontSize = 16
    public static let typographySmallScreenDisplaySmallFontStretch = normal
    public static let typographySmallScreenDisplaySmallFontStyle = normal
    public static let typographySmallScreenDisplaySmallFontWeight = 400
    public static let typographySmallScreenDisplaySmallLetterSpacing = 0
    public static let typographySmallScreenDisplaySmallLineHeight = 24
    public static let typographySmallScreenDisplaySmallParagraphIndent = 0
    public static let typographySmallScreenDisplaySmallParagraphSpacing = 0
    public static let typographySmallScreenDisplaySmallTextCase = none
    public static let typographySmallScreenDisplaySmallTextDecoration = none
    public static let typographySmallScreenDisplayXlargeFontFamily = Roboto
    public static let typographySmallScreenDisplayXlargeFontSize = 27
    public static let typographySmallScreenDisplayXlargeFontStretch = normal
    public static let typographySmallScreenDisplayXlargeFontStyle = normal
    public static let typographySmallScreenDisplayXlargeFontWeight = 600
    public static let typographySmallScreenDisplayXlargeLetterSpacing = 0
    public static let typographySmallScreenDisplayXlargeLineHeight = 32
    public static let typographySmallScreenDisplayXlargeParagraphIndent = 0
    public static let typographySmallScreenDisplayXlargeParagraphSpacing = 0
    public static let typographySmallScreenDisplayXlargeTextCase = none
    public static let typographySmallScreenDisplayXlargeTextDecoration = none
    public static let typographySmallScreenHeadingFontFamily = Roboto
    public static let typographySmallScreenHeadingFontSize = 18
    public static let typographySmallScreenHeadingFontStretch = normal
    public static let typographySmallScreenHeadingFontStyle = normal
    public static let typographySmallScreenHeadingFontWeight = 600
    public static let typographySmallScreenHeadingLetterSpacing = 0
    public static let typographySmallScreenHeadingLineHeight = 24
    public static let typographySmallScreenHeadingParagraphIndent = 0
    public static let typographySmallScreenHeadingParagraphSpacing = 0
    public static let typographySmallScreenHeadingTextCase = none
    public static let typographySmallScreenHeadingTextDecoration = none
    public static let typographySmallScreenSubheadingFontFamily = Roboto
    public static let typographySmallScreenSubheadingFontSize = 14
    public static let typographySmallScreenSubheadingFontStretch = normal
    public static let typographySmallScreenSubheadingFontStyle = normal
    public static let typographySmallScreenSubheadingFontWeight = 600
    public static let typographySmallScreenSubheadingLetterSpacing = 0
    public static let typographySmallScreenSubheadingLineHeight = 16
    public static let typographySmallScreenSubheadingParagraphIndent = 0
    public static let typographySmallScreenSubheadingParagraphSpacing = 0
    public static let typographySmallScreenSubheadingTextCase = uppercase
    public static let typographySmallScreenSubheadingTextDecoration = none
}
